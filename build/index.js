"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const actionsCore = require("@actions/core");
const slackUrl = 'https://hooks.slack.com/services/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';
const inputMessage = actionsCore.getInput('message');
const data = { text: inputMessage };
const sendToSlack = async (url, messageBody) => {
    try {
        const response = await axios_1.default.post(url, JSON.stringify(messageBody), {
            headers: { 'Content-Type': 'application/json' },
        });
        return { statusCode: response.status, statusMessage: response.statusText };
    }
    catch (error) {
        const slackError = error;
        return {
            statusCode: slackError.response.status,
            statusMessage: slackError.response.statusText,
        };
    }
};
(async () => {
    await sendToSlack(slackUrl, data);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBMEI7QUFDMUIsNkNBQThDO0FBYTlDLE1BQU0sUUFBUSxHQUNaLGlGQUFpRixDQUFDO0FBQ3BGLE1BQU0sWUFBWSxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDckQsTUFBTSxJQUFJLEdBQXFCLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxDQUFDO0FBRXRELE1BQU0sV0FBVyxHQUFHLEtBQUssRUFBRSxHQUFXLEVBQUUsV0FBNkIsRUFBRSxFQUFFO0lBQ3ZFLElBQUk7UUFDRixNQUFNLFFBQVEsR0FBRyxNQUFNLGVBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDbEUsT0FBTyxFQUFFLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFO1NBQ2hELENBQUMsQ0FBQztRQUNILE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBQzVFO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxNQUFNLFVBQVUsR0FBRyxLQUEyQixDQUFDO1FBQy9DLE9BQU87WUFDTCxVQUFVLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUFNO1lBQ3RDLGFBQWEsRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLFVBQVU7U0FDOUMsQ0FBQztLQUNIO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNWLE1BQU0sV0FBVyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNwQyxDQUFDLENBQUMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBhY3Rpb25zQ29yZSA9IHJlcXVpcmUoJ0BhY3Rpb25zL2NvcmUnKTtcblxudHlwZSBTbGFja01lc3NhZ2VCb2R5ID0ge1xuICB0ZXh0OiBzdHJpbmc7XG59O1xuXG50eXBlIFNsYWNrRXJyb3JSZXNwb25zZSA9IHtcbiAgcmVzcG9uc2U6IHtcbiAgICBzdGF0dXM6IG51bWJlcjtcbiAgICBzdGF0dXNUZXh0OiBzdHJpbmc7XG4gIH07XG59O1xuXG5jb25zdCBzbGFja1VybCA9XG4gICdodHRwczovL2hvb2tzLnNsYWNrLmNvbS9zZXJ2aWNlcy9URTVRNUhYVVovQjA0VEVIMFY1VjMvR2F4UGQyRHRRVXJtUTh0ZHVLNDhGcFFPJztcbmNvbnN0IGlucHV0TWVzc2FnZSA9IGFjdGlvbnNDb3JlLmdldElucHV0KCdtZXNzYWdlJyk7XG5jb25zdCBkYXRhOiBTbGFja01lc3NhZ2VCb2R5ID0geyB0ZXh0OiBpbnB1dE1lc3NhZ2UgfTtcblxuY29uc3Qgc2VuZFRvU2xhY2sgPSBhc3luYyAodXJsOiBzdHJpbmcsIG1lc3NhZ2VCb2R5OiBTbGFja01lc3NhZ2VCb2R5KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KHVybCwgSlNPTi5zdHJpbmdpZnkobWVzc2FnZUJvZHkpLCB7XG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICB9KTtcbiAgICByZXR1cm4geyBzdGF0dXNDb2RlOiByZXNwb25zZS5zdGF0dXMsIHN0YXR1c01lc3NhZ2U6IHJlc3BvbnNlLnN0YXR1c1RleHQgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zdCBzbGFja0Vycm9yID0gZXJyb3IgYXMgU2xhY2tFcnJvclJlc3BvbnNlO1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXNDb2RlOiBzbGFja0Vycm9yLnJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHN0YXR1c01lc3NhZ2U6IHNsYWNrRXJyb3IucmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICB9O1xuICB9XG59O1xuXG4oYXN5bmMgKCkgPT4ge1xuICBhd2FpdCBzZW5kVG9TbGFjayhzbGFja1VybCwgZGF0YSk7XG59KSgpO1xuIl19