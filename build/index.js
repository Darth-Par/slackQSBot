"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// import nodeFetch from 'node-fetch';
const https = require("https");
const data = JSON.stringify({ text: 'Hello from GitHub' });
// const data = 'Hello from GitHub';
const slackWebHook = 'https://hooks.slack.com/services/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';
// nodeFetch(slackWebHook, {
//   method: 'POST',
//   headers: {
//     'Content-Type': 'application/json',
//   },
//   body: JSON.stringify(data),
// })
//   .then((response) => response.json())
//   .then((result) => console.log(result))
//   .catch((error) => {
//     console.error('Error: ', error);
//   });
const options = {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
    },
};
const req = https.request(slackWebHook, options, (res) => {
    console.log(`STATUS: ${res.statusCode}`);
    console.log(`MESSAGE: ${res.statusMessage}`);
    console.log(`HEADERS: ${JSON.stringify(res.headers)}`);
    res.setEncoding('utf8');
    res.on('data', (chunk) => {
        console.log(`BODY: ${chunk}`);
    });
    res.on('end', () => {
        console.log('No more data in response.');
    });
});
req.on('error', (error) => {
    console.error(error);
});
req.write(data);
req.end();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBc0M7QUFDdEMsK0JBQWdDO0FBRWhDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO0FBQzNELG9DQUFvQztBQUNwQyxNQUFNLFlBQVksR0FDaEIsaUZBQWlGLENBQUM7QUFFcEYsNEJBQTRCO0FBQzVCLG9CQUFvQjtBQUNwQixlQUFlO0FBQ2YsMENBQTBDO0FBQzFDLE9BQU87QUFDUCxnQ0FBZ0M7QUFDaEMsS0FBSztBQUNMLHlDQUF5QztBQUN6QywyQ0FBMkM7QUFDM0Msd0JBQXdCO0FBQ3hCLHVDQUF1QztBQUN2QyxRQUFRO0FBRVIsTUFBTSxPQUFPLEdBQUc7SUFDZCxNQUFNLEVBQUUsTUFBTTtJQUNkLE9BQU8sRUFBRTtRQUNQLGNBQWMsRUFBRSxrQkFBa0I7S0FDbkM7Q0FDRixDQUFDO0FBRUYsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7SUFDdkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUM3QyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztJQUNILEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRTtRQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7SUFDeEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2QixDQUFDLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEIsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IG5vZGVGZXRjaCBmcm9tICdub2RlLWZldGNoJztcbmltcG9ydCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG5cbmNvbnN0IGRhdGEgPSBKU09OLnN0cmluZ2lmeSh7IHRleHQ6ICdIZWxsbyBmcm9tIEdpdEh1YicgfSk7XG4vLyBjb25zdCBkYXRhID0gJ0hlbGxvIGZyb20gR2l0SHViJztcbmNvbnN0IHNsYWNrV2ViSG9vayA9XG4gICdodHRwczovL2hvb2tzLnNsYWNrLmNvbS9zZXJ2aWNlcy9URTVRNUhYVVovQjA0VEVIMFY1VjMvR2F4UGQyRHRRVXJtUTh0ZHVLNDhGcFFPJztcblxuLy8gbm9kZUZldGNoKHNsYWNrV2ViSG9vaywge1xuLy8gICBtZXRob2Q6ICdQT1NUJyxcbi8vICAgaGVhZGVyczoge1xuLy8gICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4vLyAgIH0sXG4vLyAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuLy8gfSlcbi8vICAgLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpXG4vLyAgIC50aGVuKChyZXN1bHQpID0+IGNvbnNvbGUubG9nKHJlc3VsdCkpXG4vLyAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbi8vICAgICBjb25zb2xlLmVycm9yKCdFcnJvcjogJywgZXJyb3IpO1xuLy8gICB9KTtcblxuY29uc3Qgb3B0aW9ucyA9IHtcbiAgbWV0aG9kOiAnUE9TVCcsXG4gIGhlYWRlcnM6IHtcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICB9LFxufTtcblxuY29uc3QgcmVxID0gaHR0cHMucmVxdWVzdChzbGFja1dlYkhvb2ssIG9wdGlvbnMsIChyZXMpID0+IHtcbiAgY29uc29sZS5sb2coYFNUQVRVUzogJHtyZXMuc3RhdHVzQ29kZX1gKTtcbiAgY29uc29sZS5sb2coYE1FU1NBR0U6ICR7cmVzLnN0YXR1c01lc3NhZ2V9YCk7XG4gIGNvbnNvbGUubG9nKGBIRUFERVJTOiAke0pTT04uc3RyaW5naWZ5KHJlcy5oZWFkZXJzKX1gKTtcbiAgcmVzLnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gIHJlcy5vbignZGF0YScsIChjaHVuaykgPT4ge1xuICAgIGNvbnNvbGUubG9nKGBCT0RZOiAke2NodW5rfWApO1xuICB9KTtcbiAgcmVzLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ05vIG1vcmUgZGF0YSBpbiByZXNwb25zZS4nKTtcbiAgfSk7XG59KTtcblxucmVxLm9uKCdlcnJvcicsIChlcnJvcikgPT4ge1xuICBjb25zb2xlLmVycm9yKGVycm9yKTtcbn0pO1xuXG5yZXEud3JpdGUoZGF0YSk7XG5yZXEuZW5kKCk7XG4iXX0=